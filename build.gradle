buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'

apply plugin: 'eclipse'
apply plugin: 'maven-publish'

private String parseModVersion() {
    def parsedModVersion = new groovy.json.JsonSlurper().parseText(file('mod_version.json').text)
    return parsedModVersion.major + '.' + parsedModVersion.semantic
}

def mod_version = parseModVersion()
println('Mod-Version: ' + mod_version)

version = "${mod_version}-${mc_version}-forge"
group = 'com.github.elenterius.biomancy'
archivesBaseName = 'biomancy'

// Mojang ships Java 17 to end users in 1.18+
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    mappings channel: 'parchment', version: "${parchment_version}-${mc_version}"  // official mappings augmented with parameter names and javadocs

    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            property 'mixin.debug.verbose', 'true'
            property 'mixin.debug.export', 'true'
            mods {
                biomancy {
                    source sourceSets.main
                }
            }
        }

        clientWithJBR {
            parent runs.client

            // Hot-Swapping via JBR, includes schema changes
            // Guide: https://forge.gemwire.uk/wiki/Hotswap#Applying_schema_changes
            // You might need to build and run via IDEA (Settings -> Build, Execution, Deployment -> Build Tools -> Gradle)
            jvmArg '-XX:+AllowEnhancedClassRedefinition'
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            property 'mixin.debug.verbose', 'true'
            property 'mixin.debug.export', 'true'
            mods {
                biomancy {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            args '--mod', 'biomancy', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                biomancy {
                    source sourceSets.main
                }
            }
        }

        dataCI {
            parent runs.data
            forceExit false
        }
    }
}

//The mixin annotation processor doesn't have an obfuscation mapping when run through the IntelliJ compiler
if (System.getProperty("idea.sync.active") == "true") {
    afterEvaluate {
        tasks.withType(JavaCompile).all {
            it.options.annotationProcessorPath = files()
        }
    }
}

mixin {
    // MixinGradle Settings
    add sourceSets.main, "mixins.biomancy.refmap.json"
    config 'mixins.biomancy.json'

    // options for dev run configs
    dumpTargetOnFailure = true
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    flatDir {
        dirs 'libs'
    }
    maven {
        // JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // JEI fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven { url = 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven { url = 'https://maven.blamejared.com' }
    maven { url = "https://www.cursemaven.com" }
    maven { url = "https://jitpack.io" }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'

//    implementation fg.deobf('com.github.Elenterius:Combat-Commons:0.2.0-beta-1.18.1-forge')
    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.18:3.0.41')

    compileOnly fg.deobf("mezz.jei:jei-${mc_version}:9.7.1.255:api")
    // compile against the JEI API but do not include it at runtime
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:9.7.1.255") // at runtime, use the full JEI jar

//    curse.maven:<descriptor, can be anything>-<CurseForge project id>:<CurseForge file id>
//    runtimeOnly fg.deobf("curse.maven:create-328085:3278516") //https://www.curseforge.com/minecraft/mc-mods/create/files/3278516
//    implementation fg.deobf("com.github.Virtuoel:Pehkui:3.0.0-forge")
}

import java.util.concurrent.TimeUnit

processResources {
    exclude '.cache'
    exclude '**/*.psd'
    exclude '**/*.bbmodel'
    doLast {
        minifyJsons(processResources.outputs.files.asPath)
    }
}

void minifyJsons(String fdir) {
    print "minmizing jsons..."
    long startTime = System.nanoTime()
    for (File file in fileTree(dir: fdir, include: "**/*.json")) {
        try {
            file.text = groovy.json.JsonOutput.toJson(new groovy.json.JsonSlurper().parse(file))
        }
        catch (Exception e) {
            throw new Exception("Failed to minimize " + file, e)
        }
    }
    long ms = TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS)
    printf "%7s sec, %s ms \n", (int) (ms / 1000), ms % 1000
}

build {
    doLast {
    }
}

jar {
    exclude("com/github/elenterius/biomancy/datagen/**")

    // manifest properties for reading on runtime
    //noinspection GroovyAssignabilityCheck
    manifest {
        attributes([
                "Specification-Title"     : "biomancy",
                "Specification-Vendor"    : "Elenterius",
                "Specification-Version"   : "2",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : mod_version,
                "Implementation-Vendor"   : "Elenterius",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "mixins.biomancy.json"
        ])
    }
}

// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
