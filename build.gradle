plugins {
	id 'eclipse'
	id 'maven-publish'
	id 'net.minecraftforge.gradle' version '5.1.+'
	id 'org.parchmentmc.librarian.forgegradle' version '1.+'
	id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
}

import groovy.json.JsonSlurper

import java.util.concurrent.TimeUnit

/**
 * MAJORMOD.MAJORAPI.MINOR.PATCH
 * @return Hybrid Semantic Version
 */
private String getModVersion() {
	def parsedVersion = new JsonSlurper().parseText(file('mod_version.json').text)
	return parsedVersion.major + "." + parsedVersion.semantic
}

def mod_version = getModVersion()

version = "${mod_version}"
group = 'com.github.elenterius.biomancy'
archivesBaseName = "biomancy-forge-${mc_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17) // Mojang ships Java 17 to end users in 1.18+

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

sourceSets {
	api {}
	main {
		resources {
			srcDir 'src/generated/resources' // Include resources generated by data generators
		}
	}
	test {}
	datagen {}
}

minecraft {
	mappings channel: 'parchment', version: "${parchment_version}-${mc_version}"  // official mappings augmented with parameter names and javadocs

	// makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

	runs {
		client {
			workingDirectory project.file('run')

			// "SCAN": For mods scan.
			// "REGISTRIES": For firing of registry events.
			// "REGISTRYDUMP": For getting the contents of all registries.
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
			property 'forge.logging.console.level', 'debug'

			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
			property 'mixin.debug.verbose', 'true'
			property 'mixin.debug.export', 'true'

			// Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
			property 'forge.enabledGameTestNamespaces', 'biomancy'

			mods {
				biomancy {
					source sourceSets.main
					source sourceSets.api
				}
			}
		}

		client2 {
			parent runs.client
			args '--username', 'Dev2'
		}

		// Hot-Swapping via JBR, includes schema changes
		// Guide: https://forge.gemwire.uk/wiki/Hotswap#Applying_schema_changes
		clientWithJBR {
			parent runs.client
			jvmArg '-XX:+AllowEnhancedClassRedefinition'
		}

		server {
			workingDirectory project.file('run')

			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'

			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
			property 'mixin.debug.verbose', 'true'

			property 'forge.enabledGameTestNamespaces', 'biomancy'

			mods {
				biomancy {
					source sourceSets.main
					source sourceSets.api
				}
			}
		}

		// This run config launches GameTestServer and runs all registered game tests, then exits.
		// By default, the server will crash when no game tests are provided.
		// The game test system is also enabled by default for other run configs under the /test command.
		gameTestServer {
			workingDirectory project.file('run')

			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'

			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

			property 'forge.enabledGameTestNamespaces', 'biomancy'

			mods {
				biomancy {
					source sourceSets.main
					source sourceSets.api
				}
			}
		}

		data {
			workingDirectory project.file('run')
			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'

			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

			// Specify the mod-id for data generation, where to output the resulting resource, and where to look for existing resources
			args '--mod', 'biomancy', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

			mods {
				biomancy {
					source sourceSets.main
					source sourceSets.api
					source sourceSets.datagen
				}
			}
		}

		dataCI {
			parent runs.data
			forceExit false
		}
	}
}

//The mixin annotation processor doesn't have an obfuscation mapping when run through the IntelliJ compiler
if (System.getProperty("idea.sync.active") == "true") {
	afterEvaluate {
		tasks.withType(JavaCompile).all {
			it.options.annotationProcessorPath = files()
		}
	}
}

mixin {
	add sourceSets.main, "mixins.biomancy.refmap.json"
	config 'mixins.biomancy.json'

	// options for dev run configs
	dumpTargetOnFailure = true
}

repositories {
	flatDir {
		dirs 'libs'
	}
	maven { url = "https://dvs1.progwml6.com/files/maven/" }  // JEI
	maven { url = "https://modmaven.k-4u.nl" }  // JEI backup
	maven { url = 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
	maven { url = 'https://maven.blamejared.com' }
	maven {
		name = "KliKli Maven (Modnomicon)"
		url = "https://repo.repsy.io/mvn/klikli-dev/mods"
	}
	maven {
		name = 'tterrag maven'
		url = 'https://maven.tterrag.com/'
	}
	maven { url = "https://www.cursemaven.com" }
	maven { url = "https://api.modrinth.com/maven" }
	maven { url = "https://jitpack.io" }
}

configurations {
	datagenImplementation.extendsFrom minecraft
	apiImplementation.extendsFrom minecraft
}

dependencies {
	minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
	annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

//    runtimeOnly fg.deobf("curse.maven:debug_utils-783008:4302677") //minecraft 1.19.3

	implementation fg.deobf("software.bernie.geckolib:geckolib-forge-1.19:3.1.40")
	datagenImplementation fg.deobf("software.bernie.geckolib:geckolib-forge-1.19:3.1.40")

	implementation fg.deobf("com.klikli_dev:modonomicon:1.19.2-1.30.2")
	datagenImplementation fg.deobf("com.klikli_dev:modonomicon:1.19.2-1.30.2")

	compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
	compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}") // compile against the JEI API but do not include it at runtime
	runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}") // at runtime, use the full JEI jar

	implementation fg.deobf("com.simibubi.create:create-${mc_version}:${create_version}:slim") { transitive = false }
	implementation fg.deobf("com.jozufozu.flywheel:flywheel-forge-${mc_version}:${flywheel_version}")
	implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")

//	runtimeOnly fg.deobf("curse.maven:farmers_delight-398521:4525646") //1.2.1
//  runtimeOnly fg.deobf("curse.maven:cultural_delights-574622:4000179")

	runtimeOnly fg.deobf("curse.maven:alexs_mobs-426558:4159154") //1.21.1
	runtimeOnly fg.deobf("curse.maven:citadel-331936:4132623")
	datagenImplementation fg.deobf("curse.maven:alexs_mobs-426558:4159154") //1.21.1

	compileOnly fg.deobf("maven.modrinth:pehkui:3.6.2+1.19.2-forge") // 3.6.2+1.19.2-forge
	//needs to be compileOnly for datagen to work -> temporarily change to implementation for gameplay testing

//	implementation fg.deobf("se.mickelus.mutil:mutil:1.19.2-5.1.0")
	compileOnly fg.deobf("curse.maven:tetra-289712:4738567") // 1.19.2-5.5.0

//	runtimeOnly fg.deobf("maven.modrinth:nerb:ANmCMdMt") //NERB 0.3

	//TODO: Morph Mod Integration?
//    implementation fg.deobf("curse.maven:identity-391390:3807264") // https://www.curseforge.com/minecraft/mc-mods/identity
//    runtimeOnly fg.deobf("curse.maven:architectury-419699:4040966")

	implementation sourceSets.api.output
	datagenImplementation sourceSets.main.output
	datagenImplementation sourceSets.api.output
}

processResources {
	exclude '.cache'
	exclude '**/*.psd'
	exclude '**/*.bbmodel'
	exclude '**/*.pdn'
	doLast {
		minifyJsons(processResources.outputs.files.asPath)
	}
}

void minifyJsons(String fdir) {
	print "minmizing jsons..."
	long startTime = System.nanoTime()
	for (File file in fileTree(dir: fdir, include: "**/*.json")) {
		try {
			file.text = groovy.json.JsonOutput.toJson(new groovy.json.JsonSlurper().parse(file))
		} catch (Exception e) {
			throw new Exception("Failed to minimize " + file, e)
		}
	}
	long ms = TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS)
	printf "%7s sec, %s ms \n", (int) (ms / 1000), ms % 1000
}

jar {
	from sourceSets.api.output

	// manifest properties for reading on runtime
	manifest {
		attributes(["Specification-Title"     : "biomancy",
					"Specification-Vendor"    : "Elenterius",
					"Specification-Version"   : "2",
					"Implementation-Title"    : project.name,
					"Implementation-Version"  : project.jar.archiveVersion,
					"Implementation-Vendor"   : "Elenterius",
					"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
					"MixinConfigs"            : "mixins.biomancy.json"])
	}

	from { ["CREDITS.md", "LICENSE.txt"] } //copy files from the repository root into the jar
}

// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact jar
		}
	}
	repositories {
		maven {
			url "file:///${project.projectDir}/mcmodsrepo"
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
