buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'
apply plugin: 'idea'

version = "${mc_version}-${mod_version}-forge"
group = 'com.github.elenterius.biomancy'
archivesBaseName = 'biomancy'

//Gradle 7 & FG v5.1+ are compatible with JDK 16 but for minecraft versions pre-1.17 we have to target Java 8
java.toolchain.languageVersion = JavaLanguageVersion.of(8)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
//  mappings channel: 'snapshot', version: "20210309-1.16.5"            // mcp mappings were discontinued and can be only used for mc versions <= 1.16.5
//  mappings channel: 'official', version: "${mc_version}"              // official mojang mappings for class and method names
    mappings channel: 'parchment', version: "2021.10.17-${mc_version}"  // official mappings augmented with parameter names and javadocs

    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            mods {
                biomancy {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            mods {
                biomancy {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            args '--mod', 'biomancy', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                biomancy {
                    source sourceSets.main
                }
            }
        }
    }
}

//The mixin annotation processor doesn't have an obfuscation mapping when run through the IntelliJ compiler
if (System.getProperty("idea.sync.active") == "true") {
    afterEvaluate {
        tasks.withType(JavaCompile).all {
            it.options.annotationProcessorPath = files()
        }
    }
}

mixin {
    // MixinGradle Settings
    add sourceSets.main, "mixins.biomancy.refmap.json"
    config 'mixins.biomancy.json'

    // options for dev run configs
    debug.verbose = true
    debug.export = true
    dumpTargetOnFailure = true
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    flatDir {
        dirs 'libs'
    }
    maven {
        // JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // JEI fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven { url = 'https://maven.blamejared.com' }
    maven { url = "https://www.cursemaven.com" }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'

    compileOnly fg.deobf("mezz.jei:jei-1.16.4:7.6.1.71:api") // compile against the JEI API but do not include it at runtime
    runtimeOnly fg.deobf("mezz.jei:jei-1.16.4:7.6.1.71") // at runtime, use the full JEI jar

    compileOnly fg.deobf("vazkii.patchouli:Patchouli:1.16.4-51:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:1.16.4-51")

    //Custom Build of the PatchouliProvider https://github.com/Elenterius/PatchouliProvider
    implementation fg.deobf('xyz.brassgoggledcoders:PatchouliProvider:1.16.5-1.0.3-CUSTOM')

//    curse.maven:<descriptor, can be anything>-<CurseForge project id>:<CurseForge file id>
//    runtimeOnly fg.deobf("curse.maven:create-328085:3278516")                     //https://www.curseforge.com/minecraft/mc-mods/create/files/3278516
//    runtimeOnly fg.deobf("curse.maven:simple-farming-327554:3339467")             //https://www.curseforge.com/minecraft/mc-mods/simple-farming/files/3339467
//    runtimeOnly fg.deobf("curse.maven:extended-item-information-285166:3324259")  //https://www.curseforge.com/minecraft/mc-mods/simple-farming/files/3339467
//    runtimeOnly fg.deobf("curse.maven:sneaky-magic-322733:3238487")               //https://www.curseforge.com/minecraft/mc-mods/sneaky-magic/files/3238487
}

import java.util.concurrent.TimeUnit
processResources {
    exclude '.cache'
    exclude '**/*.psd'
    exclude '**/*.bbmodel'
    doLast {
        minifyJsons(processResources.outputs.files.asPath)
    }
}

void minifyJsons(String fdir) {
    print "minmizing jsons..."
    long startTime = System.nanoTime()
    for (File file in fileTree(dir: fdir, include: "**/*.json")) {
        try {
            file.text = groovy.json.JsonOutput.toJson(new groovy.json.JsonSlurper().parse(file))
        }
        catch (Exception e) {
            throw new Exception("Failed to minimize " + file, e)
        }
    }
    long ms = TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS)
    printf "%7s sec, %s ms \n", (int)(ms/1000), ms%1000
}

build {
    doLast {
        println("updating version in README.md...")
        def versionEscaped = mod_version.toString().replace("-", "--")
        def color = versionEscaped.contains("alpha") ? "red" : versionEscaped.contains("beta") ? "yellow" : "green"
        ant.replaceregexp(match: 'Biomancy-([0-9\\.\\-]+[a-z\\.0-9\\-]+)', replace: "Biomancy-$versionEscaped-$color", flags: 'g', byline: true) {
            fileset(dir: '.', includes: 'README.md')
        }
        ant.replaceregexp(match: 'Minecraft%20Forge-([0-9\\.\\-]+[a-z\\.0-9\\-]+)', replace: "Minecraft%20Forge-${mc_version}--${forge_version}-orange", flags: 'g', byline: true) {
            fileset(dir: '.', includes: 'README.md')
        }
        ant.replaceregexp(match: 'forge/index_([0-9\\.\\-]+[a-z\\.0-9\\-]+)', replace: "forge/index_${mc_version}.html", flags: 'g', byline: true) {
            fileset(dir: '.', includes: 'README.md')
        }
    }
}

jar {
    exclude("com/github/elenterius/biomancy/datagen/**")

    // manifest properties for reading on runtime
    manifest {
        attributes([
                "Specification-Title"     : "biomancy",
                "Specification-Vendor"    : "Elenterius",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${mod_version}",
                "Implementation-Vendor"   : "Elenterius",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "mixins.biomancy.json"
        ])
    }
}

// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')


//task copyMCClientJar(type: Copy) {
//    doLast {
//        print("copying minecraft client-extra.jar...")
//    }
//    into "scripts/lib"
//    from(configurations.runtime) {
//        include 'client-extra.jar'
//    }
//}
//
//task drawRecipeDiGraphs(type: Exec, dependsOn: copyMCClientJar) {
//    workingDir 'scripts'
//    commandLine 'python', 'recipe_graph_network.py'
//}