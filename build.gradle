buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://dist.creeper.host/Sponge/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'
apply plugin: 'idea'

version = '0.0.1-alpha.1'
group = 'com.github.elenterius.blightlings'
archivesBaseName = 'blightlings'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava.options.encoding = 'UTF-8'

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'snapshot', version: '20201028-1.16.3'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            arg "-mixin.config=blightlings.mixins.json"

            mods {
                blightlings {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            arg "-mixin.config=blightlings.mixins.json"

            mods {
                blightlings {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'blightlings', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                blightlings {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "mixins.blightlings.refmap.json"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.4-35.1.11'
}

import groovy.json.JsonSlurper
import groovy.json.JsonOutput

processResources {
    exclude '**/*.psd'
    exclude '**/*.bbmodel'
    doLast {
        println("minimizing JSONs...")
        for (File file in fileTree(dir: outputs.files.asPath, include: "**/*.json")) {
            file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
        }
    }
}

build {
    doLast {
        println("updating version in README.md...")
        def versionEscaped = version.toString().replace("-", "--")
        def color = versionEscaped.contains("alpha") ? "red" : versionEscaped.contains("beta") ? "yellow" : "green"
        ant.replaceregexp(match:'Blightlings-([0-9\\.\\-]+[a-z\\.0-9\\-]+)', replace:"Blightlings-$versionEscaped-$color", flags:'g', byline:true) {
            fileset(dir: '.', includes: 'README.md')
        }
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "blightlings",
            "Specification-Vendor": "elenterius",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"elenterius",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "blightlings.mixins.json"
        ])
    }
}

// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')