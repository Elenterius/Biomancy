buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'
apply plugin: 'idea'

version = '0.2.0-alpha.1'
group = 'com.github.elenterius.biomancy'
archivesBaseName = 'biomancy'

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
//    mappings channel: 'official', version: '1.16.5'
    mappings channel: 'snapshot', version: '20210309-1.16.5'

    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            properties 'mixin.env.disableRefMap': 'true'

            arg "-mixin.config=biomancy.mixins.json"

            mods {
                biomancy {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            properties 'mixin.env.disableRefMap': 'true'

            arg "-mixin.config=biomancy.mixins.json"

            mods {
                biomancy {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            properties 'mixin.env.disableRefMap': 'true'

            args '--mod', 'biomancy', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                biomancy {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "mixins.biomancy.refmap.json"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        // JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // JEI fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven { url 'https://maven.blamejared.com' }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.1.4'

    compileOnly fg.deobf("mezz.jei:jei-1.16.4:7.6.1.71:api") // compile against the JEI API but do not include it at runtime
    runtimeOnly fg.deobf("mezz.jei:jei-1.16.4:7.6.1.71") // at runtime, use the full JEI jar

    compileOnly fg.deobf("vazkii.patchouli:Patchouli:1.16.4-50:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:1.16.4-50")
}


import groovy.json.JsonOutput
import groovy.json.JsonSlurper

processResources {
    exclude '**/*.psd'
    exclude '**/*.bbmodel'
    doLast {
        println("minimizing JSONs...")
        for (File file in fileTree(dir: outputs.files.asPath, include: "**/*.json")) {
            try {
                file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
            }
            catch (Exception e) {
                throw new Exception("Failed to minimize " + file, e)
            }
        }
    }
}

build {
    doLast {
        println("updating version in README.md...")
        def versionEscaped = version.toString().replace("-", "--")
        def color = versionEscaped.contains("alpha") ? "red" : versionEscaped.contains("beta") ? "yellow" : "green"
        ant.replaceregexp(match: 'Biomancy-([0-9\\.\\-]+[a-z\\.0-9\\-]+)', replace: "Biomancy-$versionEscaped-$color", flags: 'g', byline: true) {
            fileset(dir: '.', includes: 'README.md')
        }
    }
}

// manifest properties for reading on runtime
jar {
    manifest {
        attributes([
                "Specification-Title"     : "biomancy",
                "Specification-Vendor"    : "elenterius",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "elenterius",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "biomancy.mixins.json"
        ])
    }
}

// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')


task copyMCClientJar(type: Copy) {
    doLast {
        print("copying minecraft client-extra.jar...")
    }
    into "scripts/lib"
    from(configurations.runtime) {
        include 'client-extra.jar'
    }
}

task drawRecipeDiGraphs(type: Exec, dependsOn: copyMCClientJar) {
    workingDir 'scripts'
    commandLine 'python', 'recipe_graph_network.py'
}