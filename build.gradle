plugins {
	id 'eclipse'
	id 'maven-publish'
	id 'net.minecraftforge.gradle' version '5.1.+'
	id 'org.parchmentmc.librarian.forgegradle' version '1.+'
	id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
}

jarJar.enable()

import groovy.json.JsonSlurper

import java.util.concurrent.TimeUnit

/**
 * MAJORMOD.MAJORAPI.MINOR.PATCH
 * @return Hybrid Semantic Version
 */
private String getModVersion() {
    def parsedVersion = new JsonSlurper().parseText(file('mod_version.json').text)
    return parsedVersion.major + "." + parsedVersion.semantic
}

def mod_version = getModVersion()

version = "${mod_version}"
group = 'com.github.elenterius.biomancy'
archivesBaseName = "biomancy-forge-${mc_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

sourceSets {
    main {
        resources {
            srcDir 'src/generated/resources' // Include resources generated by data generators
			exclude '.cache/'
        }
    }
    test
    datagen
}

minecraft {
    mappings channel: 'parchment', version: "${parchment_version}-${mc_version}"  // official mappings augmented with parameter names and javadocs

    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            property 'mixin.debug.verbose', 'true'
            property 'mixin.debug.export', 'true'

			// Hot-Swapping via JBR, includes schema changes
			// Guide: https://forge.gemwire.uk/wiki/Hotswap#Applying_schema_changes
			jvmArgs '-XX:+IgnoreUnrecognizedVMOptions', '-XX:+AllowEnhancedClassRedefinition'

			mods {
                biomancy {
                    source sourceSets.main
                }
            }
        }

        client2 {
            parent runs.client
            args '--username', 'Dev2'
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            property 'mixin.debug.verbose', 'true'

            mods {
                biomancy {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            args '--mod', 'biomancy', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                biomancy {
                    source sourceSets.main
                    source sourceSets.datagen
                }
            }
        }

        dataCI {
            parent runs.data
            forceExit false
        }
    }
}

//The mixin annotation processor doesn't have an obfuscation mapping when run through the IntelliJ compiler
if (System.getProperty("idea.sync.active") == "true") {
    afterEvaluate {
        tasks.withType(JavaCompile).all {
            it.options.annotationProcessorPath = files()
        }
    }
}

mixin {
    add sourceSets.main, "mixins.biomancy.refmap.json"
    config 'mixins.biomancy.json'

    // options for dev run configs
    dumpTargetOnFailure = true
}

repositories {
    flatDir {
        dirs 'libs'
    }
    maven { url = "https://dvs1.progwml6.com/files/maven/" }  // JEI
    maven { url = "https://modmaven.k-4u.nl" }  // JEI backup
    maven { url = 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven { url = 'https://maven.blamejared.com' }
    maven { url = "https://www.cursemaven.com" }
    maven { url = "https://jitpack.io" }
}

configurations {
    datagenImplementation.extendsFrom minecraft
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.18:3.0.56')
	datagenImplementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.18:3.0.56')

	//https://h2database.com/html/mvstore.html
	minecraftLibrary(group: "com.h2database", name: "h2-mvstore", version: "2.2.224")
	jarJar(group: "com.h2database", name: "h2-mvstore", version: "[2.2.220,3.0.0)")

	compileOnly fg.deobf("mezz.jei:jei-${mc_version}:9.7.1.255:api") // compile against the JEI API but do not include it at runtime
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:9.7.1.255") // at runtime, use the full JEI jar

//  curse.maven:<descriptor, can be anything>-<CurseForge project id>:<CurseForge file id>
    implementation fg.deobf("curse.maven:create-328085:4007544")
    runtimeOnly fg.deobf("curse.maven:flywheel-486392:3934664")

    runtimeOnly fg.deobf("curse.maven:farmers_delight-398521:3999153")

    runtimeOnly fg.deobf("curse.maven:alexs_mobs-426558:3853078")
    runtimeOnly fg.deobf("curse.maven:citadel-331936:3783096")
    datagenImplementation fg.deobf("curse.maven:alexs_mobs-426558:3853078")

    implementation fg.deobf("com.github.Virtuoel:Pehkui:3.6.0-1.18.2-forge")
    //needs to be compileOnly for datagen to work -> temporarily change to implementation for gameplay testing

    datagenImplementation sourceSets.main.output
}

processResources {
    exclude '**/*.psd'
    exclude '**/*.bbmodel'
	exclude '**/*.pdn'
    doLast {
        minifyJsons(processResources.outputs.files.asPath)
    }
}

void minifyJsons(String fdir) {
    print "minmizing jsons..."
    long startTime = System.nanoTime()
    for (File file in fileTree(dir: fdir, include: "**/*.json")) {
        try {
            file.text = groovy.json.JsonOutput.toJson(new groovy.json.JsonSlurper().parse(file))
        } catch (Exception e) {
            throw new Exception("Failed to minimize " + file, e)
        }
    }
    long ms = TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS)
    printf "%7s sec, %s ms \n", (int) (ms / 1000), ms % 1000
}

build {
    doLast {}
}

tasks.jarJar {
	archiveClassifier = ''
	from { ["CREDITS.md", "LICENSE.txt", "3RD_PARTY_LICENSE.txt"] } //copy files from the repository root into the jar
}

jar {
	archiveClassifier = "slim"

	// manifest properties for reading on runtime
	manifest {
		attributes(["Specification-Title"     : "biomancy",
					"Specification-Vendor"    : "Elenterius",
					"Specification-Version"   : "2",
					"Implementation-Title"    : project.name,
					"Implementation-Version"  : mod_version,
					"Implementation-Vendor"   : "Elenterius",
					"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
					"MixinConfigs"            : "mixins.biomancy.json"])
	}
	from { ["CREDITS.md", "LICENSE.txt"] } //copy files from the repository root into the jar
}

reobf {
	jarJar {}
}

//jar.finalizedBy('reobfJar')
tasks.build.dependsOn tasks.jarJar
jar.finalizedBy('reobfJarJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
