buildscript {
	repositories {
		maven { url = 'https://maven.minecraftforge.net' }
		maven { url = 'https://maven.parchmentmc.org' }
		maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
		mavenCentral()
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
		classpath 'org.parchmentmc:librarian:1.+'
		classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
	}
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'

apply plugin: 'eclipse'
apply plugin: 'maven-publish'


/**
 * MAJORMOD.MAJORAPI.MINOR.PATCH
 * @return Hybrid Semantic Version
 */
private String getModVersion() {
	def parsedVersion = new JsonSlurper().parseText(file('mod_version.json').text)
	return parsedVersion.major + "." + parsedVersion.semantic
}

def mod_version = getModVersion()

version = "${mod_version}"
group = 'com.github.elenterius.biomancy'
archivesBaseName = "biomancy-forge-${mc_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

sourceSets {
	main {
		resources {
			srcDir 'src/generated/resources' // Include resources generated by data generators
		}
	}
	datagen
}

minecraft {
	mappings channel: 'parchment', version: "2021.10.17-${mc_version}"
	// official mappings augmented with parameter names and javadocs

	// makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	runs {
		client {
			workingDirectory project.file('run')

			// "SCAN": For mods scan.
			// "REGISTRIES": For firing of registry events.
			// "REGISTRYDUMP": For getting the contents of all registries.
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
			property 'forge.logging.console.level', 'debug'
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
			mods {
				biomancy {
					source sourceSets.main
				}
			}
		}

		dcevm {
			parent runs.client

			// options for Dcevm JVM (https://github.com/TravaOpenJDK/trava-jdk-11-dcevm)
			// enables HotSwap Agent (needed for Dcevm version >= 11.0.9)
			jvmArg '-XX:HotswapAgent=core' //[fatjar,core,external]
		}

		server {
			workingDirectory project.file('run')

			property 'forge.logging.markers', 'SCAN'
			property 'forge.logging.console.level', 'debug'
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
			mods {
				biomancy {
					source sourceSets.main
				}
			}
		}

		data {
			workingDirectory project.file('run')

			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
			args '--mod', 'biomancy', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
			mods {
				biomancy {
					source sourceSets.main
					source sourceSets.datagen
				}
			}
		}

		dataCI {
			parent runs.data
			forceExit false
		}
	}
}

//The mixin annotation processor doesn't have an obfuscation mapping when run through the IntelliJ compiler
if (System.getProperty("idea.sync.active") == "true") {
	afterEvaluate {
		tasks.withType(JavaCompile).all {
			it.options.annotationProcessorPath = files()
		}
	}
}

mixin {
	// MixinGradle Settings
	add sourceSets.main, "mixins.biomancy.refmap.json"
	config 'mixins.biomancy.json'

	// options for dev run configs
//	debug.verbose = true
//	debug.export = true
//	dumpTargetOnFailure = true
}

repositories {
	flatDir {
		dirs 'libs'
	}
	maven {
		// JEI files
		name = "Progwml6 maven"
		url = "https://dvs1.progwml6.com/files/maven/"
	}
	maven {
		// JEI fallback
		name = "ModMaven"
		url = "https://modmaven.k-4u.nl"
	}
	maven { url = 'https://maven.blamejared.com' }
	maven { url = "https://www.cursemaven.com" }
	maven { url = "https://jitpack.io" }
}

configurations {
	datagenImplementation.extendsFrom minecraft
}


dependencies {
	minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
	annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'

	compileOnly fg.deobf("mezz.jei:jei-1.16.4:7.6.1.71:api")
	runtimeOnly fg.deobf("mezz.jei:jei-1.16.4:7.6.1.71")

	compileOnly fg.deobf("vazkii.patchouli:Patchouli:1.16.4-51:api")
	runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:1.16.4-51")

//    curse.maven:<descriptor, can be anything>-<CurseForge project id>:<CurseForge file id>
//    runtimeOnly fg.deobf("curse.maven:create-328085:3278516")                     //https://www.curseforge.com/minecraft/mc-mods/create/files/3278516
//    runtimeOnly fg.deobf("curse.maven:simple-farming-327554:3339467")             //https://www.curseforge.com/minecraft/mc-mods/simple-farming/files/3339467
//    runtimeOnly fg.deobf("curse.maven:sneaky-magic-322733:3238487")               //https://www.curseforge.com/minecraft/mc-mods/sneaky-magic/files/3238487

//    implementation fg.deobf("com.github.Virtuoel:Pehkui:3.0.0-forge")
	implementation fg.deobf('com.github.Elenterius:Combat-Commons:0.2.0-beta-1.16.5-forge')
	runtimeOnly fg.deobf("curse.maven:sewing-kit-411896:3202871")

	//Custom Build of the PatchouliProvider https://github.com/Elenterius/PatchouliProvider
	runtimeOnly fg.deobf('xyz.brassgoggledcoders:PatchouliProvider:1.16.5-1.0.3-CUSTOM')
	datagenImplementation fg.deobf('xyz.brassgoggledcoders:PatchouliProvider:1.16.5-1.0.3-CUSTOM')

	datagenImplementation sourceSets.main.output
}


import groovy.json.JsonOutput
import groovy.json.JsonSlurper

import java.util.concurrent.TimeUnit

processResources {
	exclude '.cache'
	exclude '**/*.psd'
	exclude '**/*.pdn'
	exclude '**/*.bbmodel'
	doLast {
		minifyJsons(processResources.outputs.files.asPath)
	}
}

void minifyJsons(String fdir) {
	print "minmizing jsons..."
	long startTime = System.nanoTime()
	for (File file in fileTree(dir: fdir, include: "**/*.json")) {
		try {
			file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
		}
		catch (Exception e) {
			throw new Exception("Failed to minimize " + file, e)
		}
	}
	long ms = TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS)
	printf "%7s sec, %s ms \n", (int) (ms / 1000), ms % 1000
}

jar {
	// manifest properties for reading on runtime
	manifest {
		attributes([
				"Specification-Title"     : "biomancy",
				"Specification-Vendor"    : "Elenterius",
				"Specification-Version"   : "1",
				"Implementation-Title"    : project.name,
				"Implementation-Version"  : mod_version,
				"Implementation-Vendor"   : "Elenterius",
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
				"MixinConfigs"            : "mixins.biomancy.json"
		])
	}
	from { ["LICENSE.txt"] } //copy files from the repository root into the jar
}

// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact jar
		}
	}
	repositories {
		maven {
			url "file:///${project.projectDir}/mcmodsrepo"
		}
	}
}

//task copyMCClientJar(type: Copy) {
//    doLast {
//        print("copying minecraft client-extra.jar...")
//    }
//    into "scripts/lib"
//    from(configurations.runtime) {
//        include 'client-extra.jar'
//    }
//}
//
//task drawRecipeDiGraphs(type: Exec, dependsOn: copyMCClientJar) {
//    workingDir 'scripts'
//    commandLine 'python', 'recipe_graph_network.py'
//}